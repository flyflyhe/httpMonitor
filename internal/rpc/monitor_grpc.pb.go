// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.2
// source: internal/rpc/monitor.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MonitorServerClient is the client API for MonitorServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorServerClient interface {
	Monitor(ctx context.Context, in *MonitorRequest, opts ...grpc.CallOption) (MonitorServer_MonitorClient, error)
}

type monitorServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorServerClient(cc grpc.ClientConnInterface) MonitorServerClient {
	return &monitorServerClient{cc}
}

func (c *monitorServerClient) Monitor(ctx context.Context, in *MonitorRequest, opts ...grpc.CallOption) (MonitorServer_MonitorClient, error) {
	stream, err := c.cc.NewStream(ctx, &MonitorServer_ServiceDesc.Streams[0], "/rpc.MonitorServer/Monitor", opts...)
	if err != nil {
		return nil, err
	}
	x := &monitorServerMonitorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MonitorServer_MonitorClient interface {
	Recv() (*MonitorResponse, error)
	grpc.ClientStream
}

type monitorServerMonitorClient struct {
	grpc.ClientStream
}

func (x *monitorServerMonitorClient) Recv() (*MonitorResponse, error) {
	m := new(MonitorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonitorServerServer is the server API for MonitorServer service.
// All implementations must embed UnimplementedMonitorServerServer
// for forward compatibility
type MonitorServerServer interface {
	Monitor(*MonitorRequest, MonitorServer_MonitorServer) error
	mustEmbedUnimplementedMonitorServerServer()
}

// UnimplementedMonitorServerServer must be embedded to have forward compatible implementations.
type UnimplementedMonitorServerServer struct {
}

func (UnimplementedMonitorServerServer) Monitor(*MonitorRequest, MonitorServer_MonitorServer) error {
	return status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (UnimplementedMonitorServerServer) mustEmbedUnimplementedMonitorServerServer() {}

// UnsafeMonitorServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorServerServer will
// result in compilation errors.
type UnsafeMonitorServerServer interface {
	mustEmbedUnimplementedMonitorServerServer()
}

func RegisterMonitorServerServer(s grpc.ServiceRegistrar, srv MonitorServerServer) {
	s.RegisterService(&MonitorServer_ServiceDesc, srv)
}

func _MonitorServer_Monitor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MonitorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitorServerServer).Monitor(m, &monitorServerMonitorServer{stream})
}

type MonitorServer_MonitorServer interface {
	Send(*MonitorResponse) error
	grpc.ServerStream
}

type monitorServerMonitorServer struct {
	grpc.ServerStream
}

func (x *monitorServerMonitorServer) Send(m *MonitorResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MonitorServer_ServiceDesc is the grpc.ServiceDesc for MonitorServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitorServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.MonitorServer",
	HandlerType: (*MonitorServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Monitor",
			Handler:       _MonitorServer_Monitor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/rpc/monitor.proto",
}
